
import React, { useState } from 'react';
import AppLayout from '@/components/AppLayout';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Check, Copy, Download, Globe, Loader2 } from 'lucide-react';
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Progress } from "@/components/ui/progress";
import { Checkbox } from '@/components/ui/checkbox';
import { Label } from '@/components/ui/label';
import { useToast } from '@/components/ui/use-toast';

const CopyGenerator = () => {
  const { toast } = useToast();
  const [inputText, setInputText] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generationProgress, setGenerationProgress] = useState(0);
  const [selectedLanguages, setSelectedLanguages] = useState<string[]>([
    'en', 'zh-CN', 'ko', 'es', 'fr'
  ]);
  const [generatedContent, setGeneratedContent] = useState<Record<string, string>>({});
  const [copiedLang, setCopiedLang] = useState<string | null>(null);

  const languages = [
    { code: 'en', name: '英語 (English)' },
    { code: 'zh-CN', name: '中国語 (简体中文)' },
    { code: 'zh-TW', name: '繁体字中国語 (繁體中文)' },
    { code: 'ko', name: '韓国語 (한국어)' },
    { code: 'es', name: 'スペイン語 (Español)' },
    { code: 'fr', name: 'フランス語 (Français)' },
    { code: 'de', name: 'ドイツ語 (Deutsch)' },
    { code: 'it', name: 'イタリア語 (Italiano)' },
    { code: 'pt', name: 'ポルトガル語 (Português)' },
    { code: 'ru', name: 'ロシア語 (Русский)' },
    { code: 'ar', name: 'アラビア語 (العربية)' },
    { code: 'hi', name: 'ヒンディー語 (हिन्दी)' },
    { code: 'th', name: 'タイ語 (ไทย)' },
    { code: 'vi', name: 'ベトナム語 (Tiếng Việt)' },
  ];

  const handleGenerateContent = async () => {
    if (!inputText || inputText.trim() === '') {
      toast({
        title: "テキストを入力してください",
        description: "生成するには元のテキストが必要です。",
        variant: "destructive"
      });
      return;
    }

    if (selectedLanguages.length === 0) {
      toast({
        title: "言語を選択してください",
        description: "少なくとも1つの言語を選択してください。",
        variant: "destructive"
      });
      return;
    }

    setIsGenerating(true);
    setGenerationProgress(0);

    // Simulate API call with progress
    const mockGeneration = async () => {
      // Simulate initial processing
      for (let i = 0; i <= 30; i += 10) {
        setGenerationProgress(i);
        await new Promise(r => setTimeout(r, 500));
      }

      // Generate content for each language
      const results: Record<string, string> = {};
      
      for (const lang of selectedLanguages) {
        const progress = 30 + (70 * (selectedLanguages.indexOf(lang) + 1)) / selectedLanguages.length;
        setGenerationProgress(progress);
        
        // Simulate API delay
        await new Promise(r => setTimeout(r, 800));
        
        // Mock translated content
        switch (lang) {
          case 'en':
            results['en'] = `This is a sample translation of your content into English. The AI has maintained the same tone and style while adapting it for the English-speaking market.`;
            break;
          case 'zh-CN':
            results['zh-CN'] = `这是您的内容翻译成简体中文的示例。AI保持了相同的语调和风格，同时为中文市场进行了调整。`;
            break;
          case 'ko':
            results['ko'] = `이것은 귀하의 콘텐츠를 한국어로 번역한 샘플입니다. AI는 한국 시장에 맞게 조정하면서 동일한 어조와 스타일을 유지했습니다.`;
            break;
          case 'es':
            results['es'] = `Este es un ejemplo de traducción de su contenido al español. La IA ha mantenido el mismo tono y estilo mientras lo adapta para el mercado hispanohablante.`;
            break;
          case 'fr':
            results['fr'] = `Voici un exemple de traduction de votre contenu en français. L'IA a maintenu le même ton et le même style tout en l'adaptant pour le marché francophone.`;
            break;
          default:
            results[lang] = `This is a placeholder for the ${lang} translation. In the real app, this would be generated by the AI based on your original content, maintaining your brand voice and style.`;
        }
      }
      
      setGenerationProgress(100);
      return results;
    };

    try {
      const results = await mockGeneration();
      setGeneratedContent(results);
      
      toast({
        title: "生成完了",
        description: `${Object.keys(results).length}言語のコピーが生成されました。`,
        variant: "default"
      });
    } catch (error) {
      console.error(error);
      toast({
        title: "エラーが発生しました",
        description: "コンテンツの生成中にエラーが発生しました。もう一度お試しください。",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCopyToClipboard = (lang: string) => {
    const content = generatedContent[lang];
    navigator.clipboard.writeText(content);
    setCopiedLang(lang);
    
    setTimeout(() => {
      if (copiedLang === lang) {
        setCopiedLang(null);
      }
    }, 2000);

    toast({
      title: "コピーしました",
      description: `${languages.find(l => l.code === lang)?.name}のテキストをクリップボードにコピーしました。`,
    });
  };

  const toggleLanguage = (langCode: string) => {
    if (selectedLanguages.includes(langCode)) {
      setSelectedLanguages(selectedLanguages.filter(code => code !== langCode));
    } else {
      setSelectedLanguages([...selectedLanguages, langCode]);
    }
  };

  const selectAllLanguages = () => {
    setSelectedLanguages(languages.map(lang => lang.code));
  };

  const clearAllLanguages = () => {
    setSelectedLanguages([]);
  };

  return (
    <AppLayout title="コピー生成">
      <div className="max-w-6xl mx-auto">
        <div className="mb-6">
          <h2 className="text-2xl font-bold mb-2">多言語コピー生成</h2>
          <p className="text-muted-foreground">
            原文から複数言語のコピーをAIで自動生成します。ブランドトーンを維持しながら自然な翻訳を実現します。
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Input Panel */}
          <div className="lg:col-span-1 space-y-4">
            <div className="border rounded-lg p-4 bg-white shadow-sm">
              <h3 className="font-medium mb-4">原文（日本語）</h3>
              <Textarea 
                placeholder="ここに原文を入力してください..."
                className="min-h-[200px] mb-4"
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
              />
              <div className="mb-4">
                <div className="flex justify-between mb-2">
                  <Label>生成する言語</Label>
                  <div className="space-x-2 text-sm">
                    <button 
                      className="text-polyspark-600 hover:underline" 
                      onClick={selectAllLanguages}
                    >
                      すべて選択
                    </button>
                    <span className="text-muted-foreground">|</span>
                    <button 
                      className="text-polyspark-600 hover:underline" 
                      onClick={clearAllLanguages}
                    >
                      クリア
                    </button>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-2">
                  {languages.map((lang) => (
                    <div key={lang.code} className="flex items-center space-x-2">
                      <Checkbox 
                        id={`lang-${lang.code}`}
                        checked={selectedLanguages.includes(lang.code)}
                        onCheckedChange={() => toggleLanguage(lang.code)}
                      />
                      <Label
                        htmlFor={`lang-${lang.code}`}
                        className="text-sm cursor-pointer"
                      >
                        {lang.name}
                      </Label>
                    </div>
                  ))}
                </div>
              </div>
              
              {/* Settings */}
              <div className="space-y-4 mb-4">
                <div>
                  <Label htmlFor="style">コンテンツスタイル</Label>
                  <Select defaultValue="balanced">
                    <SelectTrigger id="style">
                      <SelectValue placeholder="スタイルを選択" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectGroup>
                        <SelectItem value="formal">フォーマル・丁寧</SelectItem>
                        <SelectItem value="casual">カジュアル・親しみやすい</SelectItem>
                        <SelectItem value="persuasive">説得力・セールス重視</SelectItem>
                        <SelectItem value="technical">専門的・技術的</SelectItem>
                        <SelectItem value="balanced">バランス型（推奨）</SelectItem>
                      </SelectGroup>
                    </SelectContent>
                  </Select>
                </div>
                
                <div>
                  <Label htmlFor="variations">生成バリエーション</Label>
                  <Select defaultValue="1">
                    <SelectTrigger id="variations">
                      <SelectValue placeholder="バリエーション数" />
                    </SelectTrigger>
                    <SelectContent>
                      {[1, 2, 3, 5, 10].map((num) => (
                        <SelectItem key={num} value={num.toString()}>
                          {num}案
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <Button 
                className="w-full bg-polyspark-600 hover:bg-polyspark-700"
                onClick={handleGenerateContent}
                disabled={isGenerating}
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    生成中...
                  </>
                ) : (
                  <>
                    <Globe className="mr-2 h-4 w-4" />
                    多言語コピーを生成
                  </>
                )}
              </Button>

              {isGenerating && (
                <div className="mt-4">
                  <Progress value={generationProgress} className="h-2" />
                  <p className="text-sm text-muted-foreground mt-2 text-center">
                    {generationProgress < 100 ? '生成中...' : '完了'}
                  </p>
                </div>
              )}
            </div>
          </div>

          {/* Results Panel */}
          <div className="lg:col-span-2">
            <div className="border rounded-lg p-4 bg-white shadow-sm">
              <h3 className="font-medium mb-4">生成結果</h3>

              {Object.keys(generatedContent).length > 0 ? (
                <Tabs defaultValue={Object.keys(generatedContent)[0]}>
                  <TabsList className="mb-4 flex flex-wrap h-auto">
                    {Object.keys(generatedContent).map((langCode) => (
                      <TabsTrigger key={langCode} value={langCode} className="mb-1">
                        {languages.find(l => l.code === langCode)?.name || langCode}
                      </TabsTrigger>
                    ))}
                  </TabsList>
                  
                  {Object.entries(generatedContent).map(([langCode, content]) => (
                    <TabsContent key={langCode} value={langCode}>
                      <div className="relative">
                        <Textarea 
                          value={content}
                          className="min-h-[300px]"
                          readOnly
                        />
                        <div className="absolute top-2 right-2 flex gap-2">
                          <Button 
                            variant="outline" 
                            size="icon"
                            onClick={() => handleCopyToClipboard(langCode)}
                            title="クリップボードにコピー"
                          >
                            {copiedLang === langCode ? (
                              <Check className="h-4 w-4" />
                            ) : (
                              <Copy className="h-4 w-4" />
                            )}
                          </Button>
                          <Button
                            variant="outline"
                            size="icon"
                            title="テキストをダウンロード"
                            onClick={() => {
                              const blob = new Blob([content], { type: 'text/plain' });
                              const url = URL.createObjectURL(blob);
                              const a = document.createElement('a');
                              a.href = url;
                              a.download = `polysparkAI_${langCode}_translation.txt`;
                              a.click();
                              URL.revokeObjectURL(url);
                            }}
                          >
                            <Download className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    </TabsContent>
                  ))}
                </Tabs>
              ) : (
                <div className="border border-dashed rounded-lg flex items-center justify-center p-12 text-center">
                  <div className="max-w-sm">
                    <Globe className="mx-auto h-12 w-12 text-muted-foreground/50 mb-4" />
                    <h3 className="text-lg font-medium mb-2">コンテンツを生成してください</h3>
                    <p className="text-muted-foreground">
                      左側のパネルで原文を入力し、必要な言語を選択して「多言語コピーを生成」ボタンをクリックしてください。
                    </p>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </AppLayout>
  );
};

export default CopyGenerator;
